const admin = require('firebase-admin');

// Configurar Firebase Admin SDK
const initializeFirebase = () => {
  try {
    // Para desenvolvimento local, voc√™ pode usar a chave de servi√ßo
    // Em produ√ß√£o, use vari√°veis de ambiente
    const serviceAccount = {
      "type": "service_account",
      "project_id": "pettime-f6c68",
      "private_key_id": process.env.FIREBASE_PRIVATE_KEY_ID,
      "private_key": process.env.FIREBASE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
      "client_email": process.env.FIREBASE_CLIENT_EMAIL,
      "client_id": process.env.FIREBASE_CLIENT_ID,
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token",
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
      "client_x509_cert_url": process.env.FIREBASE_CLIENT_CERT_URL
    };

    // Verificar se as vari√°veis de ambiente est√£o configuradas
    if (!serviceAccount.private_key || !serviceAccount.client_email) {
      console.warn('‚ö†Ô∏è  Vari√°veis de ambiente do Firebase n√£o configuradas. Usando modo de desenvolvimento.');
      // Em desenvolvimento, voc√™ pode baixar o arquivo JSON de credenciais
      // e coloc√°-lo na pasta do projeto (n√£o commit√™-lo!)
      return null;
    }

    admin.initializeApp({
      credential: admin.credential.cert(serviceAccount),
      projectId: 'pettime-f6c68',
    });

    console.log('‚úÖ Firebase Admin SDK inicializado com sucesso');
    return admin;
  } catch (error) {
    console.error('‚ùå Erro ao inicializar Firebase Admin SDK:', error);
    return null;
  }
};

class PushNotificationService {
  constructor() {
    this.admin = initializeFirebase();
    this.messaging = this.admin?.messaging();
  }

  /**
   * Envia uma notifica√ß√£o push para um dispositivo espec√≠fico
   * @param {string} token - Token FCM do dispositivo
   * @param {string} title - T√≠tulo da notifica√ß√£o
   * @param {string} body - Corpo da notifica√ß√£o
   * @param {object} data - Dados adicionais
   */
  async sendToDevice(token, title, body, data = {}) {
    if (!this.messaging) {
      console.log('üì± SIMULA√á√ÉO DE NOTIFICA√á√ÉO PUSH:');
      console.log(`   Token: ${token.substring(0, 20)}...`);
      console.log(`   T√≠tulo: ${title}`);
      console.log(`   Mensagem: ${body}`);
      console.log(`   Dados:`, data);
      return { success: true, messageId: 'dev-simulation' };
    }

    try {
      const message = {
        notification: {
          title,
          body,
        },
        data: {
          ...data,
          timestamp: new Date().toISOString(),
        },
        token,
        android: {
          notification: {
            channelId: 'pettime_channel',
            priority: 'high',
            defaultSound: true,
            defaultVibrateTimings: true,
          },
        },
        apns: {
          payload: {
            aps: {
              alert: {
                title,
                body,
              },
              badge: 1,
              sound: 'default',
            },
          },
        },
      };

      const response = await this.messaging.send(message);
      console.log('‚úÖ Notifica√ß√£o enviada com sucesso:', response);
      return { success: true, messageId: response };
    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Envia notifica√ß√£o para m√∫ltiplos dispositivos
   * @param {string[]} tokens - Array de tokens FCM
   * @param {string} title - T√≠tulo da notifica√ß√£o
   * @param {string} body - Corpo da notifica√ß√£o
   * @param {object} data - Dados adicionais
   */
  async sendToMultipleDevices(tokens, title, body, data = {}) {
    if (!this.messaging) {
      console.log('üì± SIMULA√á√ÉO DE NOTIFICA√á√ÉO PUSH M√öLTIPLA:');
      console.log(`   ${tokens.length} dispositivos`);
      console.log(`   T√≠tulo: ${title}`);
      console.log(`   Mensagem: ${body}`);
      return { success: true, successCount: tokens.length, failureCount: 0 };
    }

    try {
      const message = {
        notification: {
          title,
          body,
        },
        data: {
          ...data,
          timestamp: new Date().toISOString(),
        },
        tokens,
        android: {
          notification: {
            channelId: 'pettime_channel',
            priority: 'high',
            defaultSound: true,
            defaultVibrateTimings: true,
          },
        },
        apns: {
          payload: {
            aps: {
              alert: {
                title,
                body,
              },
              badge: 1,
              sound: 'default',
            },
          },
        },
      };

      const response = await this.messaging.sendEachForMulticast(message);
      console.log(`‚úÖ ${response.successCount}/${tokens.length} notifica√ß√µes enviadas`);
      
      if (response.failureCount > 0) {
        console.warn(`‚ö†Ô∏è  ${response.failureCount} falhas:`, response.responses
          .filter(r => !r.success)
          .map(r => r.error?.message));
      }

      return {
        success: true,
        successCount: response.successCount,
        failureCount: response.failureCount,
        responses: response.responses,
      };
    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√µes m√∫ltiplas:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Envia notifica√ß√£o por t√≥pico
   * @param {string} topic - Nome do t√≥pico
   * @param {string} title - T√≠tulo da notifica√ß√£o
   * @param {string} body - Corpo da notifica√ß√£o
   * @param {object} data - Dados adicionais
   */
  async sendToTopic(topic, title, body, data = {}) {
    if (!this.messaging) {
      console.log('üì± SIMULA√á√ÉO DE NOTIFICA√á√ÉO POR T√ìPICO:');
      console.log(`   T√≥pico: ${topic}`);
      console.log(`   T√≠tulo: ${title}`);
      console.log(`   Mensagem: ${body}`);
      return { success: true, messageId: 'dev-topic-simulation' };
    }

    try {
      const message = {
        notification: {
          title,
          body,
        },
        data: {
          ...data,
          timestamp: new Date().toISOString(),
        },
        topic,
        android: {
          notification: {
            channelId: 'pettime_channel',
            priority: 'high',
            defaultSound: true,
            defaultVibrateTimings: true,
          },
        },
        apns: {
          payload: {
            aps: {
              alert: {
                title,
                body,
              },
              badge: 1,
              sound: 'default',
            },
          },
        },
      };

      const response = await this.messaging.send(message);
      console.log('‚úÖ Notifica√ß√£o enviada ao t√≥pico:', response);
      return { success: true, messageId: response };
    } catch (error) {
      console.error('‚ùå Erro ao enviar notifica√ß√£o ao t√≥pico:', error);
      return { success: false, error: error.message };
    }
  }

  /**
   * Programa uma notifica√ß√£o (implementa√ß√£o futura)
   * @param {string} token - Token FCM
   * @param {string} title - T√≠tulo
   * @param {string} body - Corpo
   * @param {Date} scheduledTime - Hora agendada
   * @param {object} data - Dados adicionais
   */
  async scheduleNotification(token, title, body, scheduledTime, data = {}) {
    // Firebase n√£o suporta agendamento nativo
    // Voc√™ precisaria implementar um sistema de agendamento (cron jobs, etc.)
    
    console.log('üìÖ Agendamento de notifica√ß√£o:', {
      token: token.substring(0, 20) + '...',
      title,
      body,
      scheduledTime: scheduledTime.toISOString(),
      data,
    });

    // TODO: Implementar sistema de agendamento
    // Op√ß√µes: node-cron, bull queue, agenda, etc.
    
    return {
      success: true,
      scheduled: true,
      scheduledTime: scheduledTime.toISOString(),
    };
  }
}

// Inst√¢ncia singleton
const pushService = new PushNotificationService();

module.exports = pushService;